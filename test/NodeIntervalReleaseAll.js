// run -> node test/NodeIntervalReleaseAll.js --network localhost 
const { ethers } = require("ethers");

// config
const provider = new ethers.JsonRpcProvider("http://localhost:8545"); // ‡∏´‡∏£‡∏∑‡∏≠ RPC ‡∏à‡∏£‡∏¥‡∏á
const privateKey = "OwnerPrivateKey"; // Address ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏Å release (‡πÉ‡∏Ñ‡∏£‡∏Å‡πá‡πÑ‡∏î‡πâ) ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏á‡∏¥‡∏ô // ‡∏ñ‡πâ‡∏≤‡∏ï‡∏≠‡∏ô Test ‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å npx hardhat node
const contractAddr = "AddressOfContract"; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô address ‡∏Ç‡∏≠‡∏á contract ‡∏à‡∏£‡∏¥‡∏á // ‡∏ñ‡πâ‡∏≤‡∏ï‡∏≠‡∏ô Test ‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å Deploy

// === CONTRACT ABI ===
const abi = [
  "function releaseAll() external"
];

const wallet = new ethers.Wallet(privateKey, provider);
const contract = new ethers.Contract(contractAddr, abi, wallet);

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ó‡∏∏‡∏Å 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
setInterval(async () => {
  try {
    const tx = await contract.releaseAll();
    await tx.wait();
    console.log("‚úÖ releaseAll() called at", new Date().toLocaleTimeString());

    const balance = await provider.getBalance(wallet.address);
    const eth = ethers.formatEther(balance);
    console.log(`üí∞ Wallet: ${wallet.address}`);
    console.log(`Œû ETH Remaining: ${ethers.formatEther(balance)} ETH\n`);

  } catch (err) {
    console.log("‚ö†Ô∏è  Failed:", err.message);
  }
}, 24 * 3600 * 1000);